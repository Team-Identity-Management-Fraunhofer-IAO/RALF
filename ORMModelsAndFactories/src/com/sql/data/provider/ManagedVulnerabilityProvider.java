package com.sql.data.provider;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.NoResultException;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.NativeQuery;

import com.sql.data.objects.persistence.report.vulnerabilitymanagement.ManagedVulnerability;

public class ManagedVulnerabilityProvider extends PersistenceObjectProvider<ManagedVulnerability> implements PersistenceObjectProviderService<ManagedVulnerability>{

	public void delete(ManagedVulnerability obj) {
		super.instantiateHibernateReportingSessionFactory();
		super.delete(obj);
	}
	
	public ManagedVulnerability find(String identifier) {
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		ManagedVulnerability vuln = session.find(ManagedVulnerability.class, identifier);
		session.close();
		return vuln;
	}
	
	public void persist (ManagedVulnerability obj) {
		super.instantiateHibernateReportingSessionFactory();		
		super.persist(obj);
	}
	
	public void update(ManagedVulnerability obj) {
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		Transaction tx = session.beginTransaction();
		session.update(obj);
		tx.commit();
		session.close();
	}
	
	public List<ManagedVulnerability> getAllManagedVulnerabilities(){
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		String sql = "SELECT * FROM managedVulnerability";
		NativeQuery<ManagedVulnerability> vulnQuery = session.createNativeQuery(sql, ManagedVulnerability.class);
		try {
			List<ManagedVulnerability> vulnerabilities = vulnQuery.list();
			session.close();
			return vulnerabilities;
		}catch (NoResultException ex) {
			session.close();
			return new ArrayList<ManagedVulnerability>();
		}
	}
	
	@Override
	public Class<ManagedVulnerability> getClassName() {
		return ManagedVulnerability.class;
	}
	

}
