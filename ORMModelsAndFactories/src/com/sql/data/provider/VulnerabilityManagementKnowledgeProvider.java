package com.sql.data.provider;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.NoResultException;

import org.hibernate.Session;
import org.hibernate.query.NativeQuery;

import com.sql.data.objects.persistence.report.vulnerabilitymanagement.VulnerabilityManagementKnowledge;

public class VulnerabilityManagementKnowledgeProvider extends PersistenceObjectProvider<VulnerabilityManagementKnowledge> implements PersistenceObjectProviderService<VulnerabilityManagementKnowledge>{

	public VulnerabilityManagementKnowledge find (int id) {
		super.instantiateHibernateReportingSessionFactory();
		return super.find(id);
	}
	
	public void delete(VulnerabilityManagementKnowledge obj) {
		super.instantiateHibernateReportingSessionFactory();
		super.delete(obj);
	}
	
	public void persist(VulnerabilityManagementKnowledge obj) {
		super.instantiateHibernateReportingSessionFactory();
		super.persist(obj);
	}
	
	@Override
	public Class<VulnerabilityManagementKnowledge> getClassName() {
		return VulnerabilityManagementKnowledge.class;
	}
	
	public int getLastRawIdentifier() {
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		String sql = "SELECT MAX(rawIdentifier) FROM vulnerabilityManagementKnowledge";
		NativeQuery<Object> idQuery = session.createNativeQuery(sql);
		int identifier = (Integer) idQuery.getSingleResult();
		session.close();
		return identifier;
	}
	
	public List<VulnerabilityManagementKnowledge> getVulnerabilityManagementKnowledgeForRawIdentifier(int rawIdentifier){
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		String sql = "SELECT * FROM vulnerabilityManagementKnowledge WHERE rawIdentifier= :rawIdentifier";
		NativeQuery<VulnerabilityManagementKnowledge> vulnQuery = session.createNativeQuery(sql, VulnerabilityManagementKnowledge.class);
		vulnQuery.setParameter("rawIdentifier", rawIdentifier);
		List<VulnerabilityManagementKnowledge> vulnKnowledge = new ArrayList<VulnerabilityManagementKnowledge>();
		try {
			vulnKnowledge = vulnQuery.list();
			session.close();
			return vulnKnowledge;
		} catch (NoResultException ex) {
			session.close();
			return vulnKnowledge;
		}
	}
	
	public List<VulnerabilityManagementKnowledge> getVulnerabilityManagementKnowledge(){
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		String sql = "SELECT * FROM vulnerabilityManagementKnowledge;";
		NativeQuery<VulnerabilityManagementKnowledge> knowQuery = session.createNativeQuery(sql, VulnerabilityManagementKnowledge.class);
		List<VulnerabilityManagementKnowledge> result = new ArrayList<VulnerabilityManagementKnowledge>();
		try {
			result = knowQuery.list();
			session.close();
			return result;
		}catch (NoResultException ex) {
			session.close();
			return result;
		}
	}
	
	public List<VulnerabilityManagementKnowledge> getVulnerabilityManagementKnowledge(String vectorString, String vectorExposure, String privilegesRequired, String userInteraction){
		super.instantiateHibernateReportingSessionFactory();
		Session session = super.hibernateSessionFactory.openSession();
		String vectorCmp = null;
		String exposureCmp = null;
		String privCmp = null;
		String userCmp = null;
		if (!vectorString.equals("*")) {
			vectorCmp = "(vectorString = :vectorString OR vectorString='*')";
		}
		if (!vectorExposure.equals("*")) {
			exposureCmp = "(vectorExposure = :vectorExposure OR vectorExposure='*')";
		}
		if (!privilegesRequired.equals("*")) {
			privCmp = "(privilegesRequired = :privilegesRequired OR privilegesRequired='*')";
		}
		if (!userInteraction.equals("*")) {
			userCmp = "(userInteraction = :userInteraction OR userInteraction='*')";
		}
		
		String sql = "SELECT * FROM vulnerabilityManagementKnowledge "+(vectorCmp!=null && exposureCmp!=null && privCmp != null && userCmp != null?"WHERE ":"")+(vectorCmp!=null?vectorCmp:"")+(exposureCmp!=null?" AND ":"")+(exposureCmp!=null?exposureCmp:"")+(privCmp!=null?" AND ":"")+(privCmp!=null?privCmp:"")+(userCmp!=null?" AND ":"")+(userCmp!=null?userCmp:"")+";";
		NativeQuery<VulnerabilityManagementKnowledge> knowQuery = session.createNativeQuery(sql, VulnerabilityManagementKnowledge.class);
		if (vectorCmp != null) {
			knowQuery.setParameter("vectorString",vectorString);
		}
		if (exposureCmp != null) {
			knowQuery.setParameter("vectorExposure",vectorExposure);
		}
		if (privCmp != null) {
			knowQuery.setParameter("privilegesRequired", privilegesRequired);
		}
		if (userCmp != null) {
			knowQuery.setParameter("userInteraction", userInteraction);
		}
		List<VulnerabilityManagementKnowledge> knowledges = new ArrayList<VulnerabilityManagementKnowledge>();
		try {
			knowledges = knowQuery.list();
			session.close();
			return knowledges;
		}catch (NoResultException ex) {
			session.close();
			return knowledges;
		}
	}
	
}
